version: '3'

services:
  # MQTT Consumer service that forwards to Kafka
  mqtt-publisher:
    build:
      context: .
      dockerfile: Dockerfile.publisher
    depends_on:
      - kafka
    environment:
      - BROKER_URL=${HIVEMQ_BROKER_URL}
      - BROKER_PORT=${HIVEMQ_BROKER_PORT}
      - USERNAME=${HIVEMQ_USERNAME}
      - PASSWORD=${HIVEMQ_PASSWORD}
    volumes:
      - ./scripts:/app
    networks:
      - data-pipeline-network

  mqtt-consumer:
    build:
      context: .
      dockerfile: Dockerfile.mqtt
    environment:
      - BROKER_URL=${HIVEMQ_BROKER_URL}
      - BROKER_PORT=${HIVEMQ_BROKER_PORT}
      - USERNAME=${HIVEMQ_USERNAME}
      - PASSWORD=${HIVEMQ_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./scripts:/app
    depends_on:
      - kafka
    restart: on-failure
    networks:
      - data-pipeline-network

  # Zookeeper service (required for Kafka)
  zookeeper:
    image: bitnami/zookeeper:3.8.1
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami
    networks:
      - data-pipeline-network

  # Kafka service
  kafka:
    image: bitnami/kafka:3.4.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami
    depends_on:
      - zookeeper
    networks:
      - data-pipeline-network

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - data-pipeline-network

  # Airflow service
  airflow:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      # Add BigQuery environment variables
      - BQ_PROJECT_ID=${BQ_PROJECT_ID}
      - BQ_DATASET_ID=${BQ_DATASET_ID:-machine_sensor_data}
      - BQ_TABLE_ID=${BQ_TABLE_ID:-aggregated_metrics}
      - BQ_TEMP_BUCKET=${BQ_TEMP_BUCKET}
      - GOOGLE_APPLICATION_CREDENTIALS=/secrets/bigquery-key.json
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      # Mount the service account key
      - ./secrets/bigquery-key.json:/secrets/bigquery-key.json:ro
    command: >
      bash -c "
        airflow db upgrade &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
        airflow scheduler &
        airflow webserver"
    networks:
      - data-pipeline-network

  # Spark service
  spark:
    build:
      context: ./spark
      dockerfile: Dockerfile
    ports:
      - "4040:4040"
    volumes:
      - ./spark/app:/opt/spark/app
      - ./logs:/opt/spark/logs
      # Mount the service account key
      - ./secrets/bigquery-key.json:/secrets/bigquery-key.json:ro
    command: >
      bash -c "sleep 10 && 
      spark-submit \
      --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0,com.google.cloud.spark:spark-bigquery-with-dependencies_2.12:0.32.0 \
      --conf spark.hadoop.google.cloud.auth.service.account.enable=true \
      --conf spark.hadoop.google.cloud.auth.service.account.json.keyfile=/secrets/bigquery-key.json \
      /opt/spark/app/process_data.py"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - BQ_PROJECT_ID=${BQ_PROJECT_ID}
      - BQ_DATASET_ID=${BQ_DATASET_ID:-machine_sensor_data}
      - BQ_TABLE_ID=${BQ_TABLE_ID:-aggregated_metrics}
      - BQ_TEMP_BUCKET=${BQ_TEMP_BUCKET}
      - GOOGLE_APPLICATION_CREDENTIALS=/secrets/bigquery-key.json
    networks:
      - data-pipeline-network

volumes:
  zookeeper_data:
  kafka_data:
  postgres_data:

networks:
  data-pipeline-network:
    driver: bridge